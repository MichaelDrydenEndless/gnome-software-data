#!/usr/bin/python3
# Copyright Â© 2020 Endless OS Foundation LLC
#
# Generator for external appstream XML
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
import os
import gi

gi.require_version("Flatpak", "1.0")
gi.require_version("AppStreamGlib", "1.0")
from gi.repository import Flatpak, AppStreamGlib, Gio  # noqa: 402


ARCH = "x86_64"


def remote_list_apps(installation, remote_name):
    appstream_xml_path = os.path.join(
        "/var/lib/flatpak/appstream", remote_name, ARCH, "active", "appstream.xml"
    )
    appstream_xml_file = Gio.File.new_for_path(appstream_xml_path)
    store = AppStreamGlib.Store()
    if not store.from_file(appstream_xml_file, None, None):
        raise ValueError(f"Failed to load {appstream_xml_path}")

    appstream_ids_by_ref = {}
    for app in store.dup_apps():
        # if 'urtle' in app.get_id():
        #     import ipdb; ipdb.set_trace()
        b = app.get_bundles()[0]
        if b.get_kind() == AppStreamGlib.BundleKind.FLATPAK:
            appstream_ids_by_ref[b.get_id()] = app.get_id()

    refs = installation.list_remote_refs_sync(remote_name)
    remote_refs_by_name = {}
    for ref in refs:
      if ref.get_kind() == Flatpak.RefKind.APP and ref.get_arch() == ARCH:
            formatted = ref.format_ref()
            appstream_id = appstream_ids_by_ref.get(formatted)
            remote_refs_by_name[ref.get_name()] = (formatted, appstream_id)

    return remote_refs_by_name


def main():
    with open(os.path.join(os.path.dirname(__file__), "eos-extra.txt")) as f:
        app_names = sorted({x.strip() for x in f})

    installation = Flatpak.get_system_installations()[0]
    apps_by_name = {}
    apps_by_name.update(remote_list_apps(installation, "eos-apps"))
    # Prefer Flathub apps
    apps_by_name.update(remote_list_apps(installation, "flathub"))

    xmls = [
        """
<?xml version="1.0" encoding="UTF-8"?>
<components version="0.8" origin="flathub">""".strip()
    ]

    for name in app_names:
        flatpak_ref, appstream_id = apps_by_name[name]
        if appstream_id is None:
            raise ValueError(f"No AppStream ID for {flatpak_ref}")

        # App ids are not supposed to have less than 3 fields, as per
        # https://www.freedesktop.org/software/appstream/docs/chap-Metadata.html#tag-id-generic
        if (appstream_id.endswith(".desktop") and
                len(appstream_id.split('.')) > 3):
            appstream_id = appstream_id[:-len(".desktop")]

        xmls.append(
            f"""
  <component type="desktop" merge="append">
    <id>{appstream_id}</id>
    <kudos>
      <kudo>GnomeSoftware::popular</kudo>
    </kudos>
    <bundle type="flatpak">{flatpak_ref}</bundle>
  </component>
"""
        )

    xmls.append("""</components>""")

    with open(os.path.join(os.path.dirname(__file__), "eos-extra.xml"), "w") as f:
        f.write("".join(xmls))


if __name__ == "__main__":
    main()
